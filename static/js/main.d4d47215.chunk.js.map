{"version":3,"sources":["app/data/recipes.ts","app/services/recipe-service.ts","app/pages/home.tsx","app/pages/recipe.tsx","app/components/multi-line-input.tsx","app/pages/recipe-generator.tsx","app/pages/page-not-found.tsx","icons/home.svg","icons/edit-doc.svg","app/components/nav-bar.tsx","app/App.tsx","app/reportWebVitals.ts","index.tsx"],"names":["allRecipes","name","url","ingredients","method","getAllRecipes","Home","className","map","recipe","to","IngredientsDisplay","props","ingredient","MethodDisplay","step","RecipeDisplay","href","MultiLineInput","label","state","setState","i","value","onChange","e","lineIndex","newState","target","updateLine","onClick","splice","data-testid","newData","RecipeGenerator","useState","recipeName","setRecipeName","setUrl","setIngredients","steps","setSteps","json","setJson","JSON","stringify","navigator","clipboard","writeText","PageNotFound","NavBar","src","homeIcon","alt","editIcon","App","redirect","sessionStorage","location","history","replaceState","process","basename","exact","path","render","matchingRecipe","filter","toLowerCase","length","getRecipe","match","params","recipeId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4d47215.chunk.js","sourcesContent":["import { Recipe } from \"app/models/recipe\";\n\nexport const allRecipes: Recipe[] = [\n    {\n        name: \"Bibimbap\",\n        url: \"https://www.lazycatkitchen.com/vegan-bibimbap/\",\n        ingredients: [\"1 egg\", \"2 onions\"],\n        method: [\"Fry egg\", \"Fry onion\"]\n    },\n    {\n        name: \"Daal\",\n        url: \"https://www.google.com\"\n    },\n    {\n        name: \"Chilli\",\n        url: \"https://www.facebook.com\"\n    },\n    {\n        name: \"Mac & Greens\",\n        url: \"https://google.com\"\n    },\n    {\n        name: \"Another\",\n        url: \"https://example.com\"\n    },\n    {\"name\":\"Title\",\"url\":\"google\"}\n];","import { allRecipes } from \"app/data/recipes\";\nimport { Recipe } from \"app/models/recipe\";\n\nexport const getAllRecipes = (): Recipe[] => {\n    return allRecipes;\n};\n\nexport const getRecipe = (name: string): Recipe | null => {\n    const matchingRecipe = getAllRecipes().filter((recipe) =>\n        recipe.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (matchingRecipe.length > 0) {\n        return matchingRecipe[0];\n    }\n\n    return null;\n};","import React from 'react';\nimport 'app/pages/Pages.scss';\nimport { Link } from 'react-router-dom';\nimport { getAllRecipes } from 'app/services/recipe-service';\n\n\nconst Home: React.FC = () => {\n    const allRecipes = getAllRecipes();\n\n    return (\n        <div className=\"app-page\">\n            <h1>Recipes</h1>\n            {\n                allRecipes.map((recipe) => {\n                    return <Link className=\"recipe-link\" key={recipe.name} to={`/recipe/${recipe.name}`}>{recipe.name}</Link>;\n                })\n            }\n        </div>\n    );\n}\n\nexport default Home;\n","import { Recipe } from 'app/models/recipe';\nimport React from 'react';\nimport 'app/pages/Pages.scss';\n\ntype RecipeProps = {\n    recipe: Recipe;\n};\n\ntype IngredientsProps = {\n    ingredients?: string[];\n}\n\ntype MethodProps = {\n    method?: string[];\n}\n\nconst IngredientsDisplay: React.FC<IngredientsProps> = (props: {ingredients?: string[]}) => {\n    if (!props.ingredients) {\n        return null;\n    }\n    return <>\n        <h2>Ingredients</h2>\n        <ul>\n            {\n                props.ingredients.map((ingredient) => {\n                    return <li key={ingredient}>{ingredient}</li>\n                })\n            }\n        </ul>\n    </>;\n};\n\nconst MethodDisplay: React.FC<MethodProps> = (props: {method?: string[]}) => {\n    if (!props.method) {\n        return null;\n    }\n    return <>\n        <h2>Method</h2>\n        <ul>\n            {\n                props.method.map((step) => {\n                    return <li key={step}>{step}</li>\n                })\n            }\n        </ul>\n    </>;\n};\n\nconst RecipeDisplay: React.FC<RecipeProps> = (props: RecipeProps) => {\n    const recipe = props.recipe;\n\n    return (\n        <div className=\"app-page\">\n            <div className=\"recipe\">\n                <a href={recipe.url} className=\"recipe-link\">Link to {recipe.name}</a>\n                <IngredientsDisplay ingredients={recipe.ingredients} />\n                <MethodDisplay method={recipe.method} />\n            </div>\n        </div>\n    );\n}\n\nexport default RecipeDisplay;\n","import React from 'react';\n\ntype MultiLineInputProps = {\n    label: string;\n    state: string[];\n    setState: (newState: string[]) => void;\n};\n\nconst MultiLineInput: React.FC<MultiLineInputProps> = (props: MultiLineInputProps) => {\n    const {label, state, setState} = props;\n    const addLine = () => {\n        const newData = [...state, \"\"];\n        setState(newData);\n    };\n    const updateLine = (lineIndex: number, e: React.ChangeEvent<HTMLInputElement>) => {\n        const newState = [...state];\n        newState[lineIndex] = e.target.value;\n        setState(newState);\n    };\n    const deleteLine = (lineIndex: number) => {\n        state.splice(lineIndex, 1);\n        setState([...state]);\n    };\n\n    return <>\n        <label>{label}</label>\n        {\n            state.map((step, i) => {\n                return <div key={i}>\n                    <input value={step} onChange={(e) => updateLine(i, e)} />\n                    <button onClick={() => deleteLine(i)} data-testid=\"delete\">delete</button>\n                </div>;\n            })\n        }\n        <button onClick={addLine} data-testid=\"add\">+</button>\n    </>;\n};\n\nexport default MultiLineInput;","import React, {useState} from 'react';\nimport 'app/pages/Pages.scss';\nimport { Recipe } from 'app/models/recipe';\nimport MultiLineInput from 'app/components/multi-line-input';\n\nconst RecipeGenerator: React.FC = () => {\n    const [recipeName, setRecipeName] = useState<string>(\"\");\n    const [url, setUrl] = useState<string>(\"\");\n    const [ingredients, setIngredients] = useState<string[]>([]);\n    const [steps, setSteps] = useState<string[]>([]);\n    const [json, setJson] = useState<string>(\"\");\n    const updateRecipe = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setRecipeName(e.target.value);\n    };\n    const updateUrl = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setUrl(e.target.value);\n    };\n    const generateJson = () => {\n        const recipe: Recipe = {\n            name: recipeName,\n            url: url,\n            ingredients: ingredients,\n            method: steps\n        };\n        setJson(JSON.stringify(recipe));\n    };\n    const copyToClipboard = () => {\n        navigator.clipboard.writeText(json);\n    };\n\n    return <div className=\"app-page\">\n        <label>Name</label>\n        <input value={recipeName} onChange={updateRecipe}></input>\n        <label>URL</label>\n        <input value={url} onChange={updateUrl}></input>\n        <MultiLineInput label=\"Ingredients\" state={ingredients} setState={setIngredients}/>\n        <MultiLineInput label=\"Method\" state={steps} setState={setSteps}/>\n        <button onClick={generateJson}>Generate JSON</button>\n        <div>\n            {json}\n        </div>\n        <button onClick={copyToClipboard}>Copy to clipboard</button>\n    </div>;\n};\n\nexport default RecipeGenerator;","import React from 'react';\nimport 'app/pages/Pages.scss';\nimport { Link } from 'react-router-dom';\n\n\nconst PageNotFound: React.FC = () => {\n    return (\n        <div className=\"app-page\">\n            <h1>404</h1>\n            <p>Hmm, looks like that page wasn't found. Return to the homepage?</p>\n            <Link className=\"home-link\" to={\"/\"}>Home</Link>\n        </div>\n    );\n}\n\nexport default PageNotFound;\n","export default __webpack_public_path__ + \"static/media/home.6660b146.svg\";","export default __webpack_public_path__ + \"static/media/edit-doc.7f53e506.svg\";","import React from 'react';\nimport homeIcon from 'icons/home.svg';\nimport editIcon from 'icons/edit-doc.svg';\nimport {Link} from 'react-router-dom';\nimport 'app/components/nav-bar.scss';\n\nconst NavBar: React.FC = () => {\n    return <div className=\"nav-bar\">\n        <Link to=\"/\">\n            <img src={homeIcon} className=\"icon\" alt=\"Home icon\" />\n        </Link>\n        <Link to=\"/recipe-generator\">\n            <img src={editIcon} className=\"icon\" alt=\"Edit icon\" />\n        </Link>\n    </div>\n};\n\nexport default NavBar;","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport Home from 'app/pages/home';\nimport RecipeDisplay from 'app/pages/recipe';\nimport { getRecipe } from './services/recipe-service';\nimport RecipeGenerator from './pages/recipe-generator';\nimport PageNotFound from './pages/page-not-found';\nimport NavBar from './components/nav-bar';\n\nconst App: React.FC = () => {\n    const redirect = sessionStorage.redirect;\n    delete sessionStorage.redirect;\n    if (redirect && redirect != location.href) {\n        history.replaceState(null, process.env.REACT_APP_BASE_URL || '', redirect);\n    }\n\n    return (\n        <Router basename={process.env.REACT_APP_BASE_URL}>\n            <NavBar />\n            <Switch>\n                <Route exact path=\"/\">\n                    <Home />\n                </Route>\n                <Route path=\"/recipe/:recipeId\" render={(props)=>{\n                    const recipe = getRecipe(props.match.params.recipeId);\n                    if (!recipe) {\n                        return <PageNotFound />;\n                    }\n\n                    return <RecipeDisplay recipe={recipe}/>}\n                } />\n                <Route path=\"/recipe-generator\">\n                    <RecipeGenerator />\n                </Route>\n                <Route>\n                    <PageNotFound />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals: () => void = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'index.css';\nimport App from 'app/App';\nimport reportWebVitals from 'app/reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}