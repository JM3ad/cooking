{"version":3,"sources":["app/models/recipe.ts","app/pages/home.tsx","app/pages/recipe.tsx","app/App.tsx","app/reportWebVitals.ts","index.tsx"],"names":["getRecipe","name","matchingRecipe","allRecipes","filter","recipe","toLowerCase","length","url","Home","className","map","to","RecipeDisplay","props","href","App","redirect","sessionStorage","location","history","replaceState","process","basename","exact","path","render","match","params","recipeId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"+MAKaA,G,MAAY,SAACC,GACtB,IAAMC,EAAiBC,EAAWC,QAAO,SAACC,GAAD,OACrCA,EAAOJ,KAAKK,gBAAkBL,EAAKK,iBAGvC,OAAIJ,EAAeK,OAAS,EACjBL,EAAe,GAGnB,CACHD,KAAM,SACNO,IAAK,uBAIAL,EAAuB,CAChC,CACIF,KAAM,WACNO,IAAK,mD,OCJEC,EAdQ,WACrB,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SAEIP,EAAWQ,KAAI,SAACN,GACd,OAAO,cAAC,IAAD,CAAwBO,GAAE,kBAAaP,EAAOJ,MAA9C,SAAuDI,EAAOJ,MAAnDI,EAAOJ,cCMtBY,EAV8B,SAACC,GAC5C,IAAMT,EAASS,EAAMT,OAErB,OACE,qBAAKK,UAAU,SAAf,SACI,mBAAGK,KAAMV,EAAOG,IAAhB,SAAsBH,EAAOJ,UC2BtBe,EA5BO,WACpB,IAAMC,EAAWC,eAAeD,SAMhC,cALOC,eAAeD,SAClBA,GAAYA,GAAYE,SAASJ,MACnCK,QAAQC,aAAa,KAAMC,UAAsCL,GAInE,cAAC,IAAD,CAAQM,SAAUD,UAAlB,SACE,gCACE,6BACE,6BACE,cAAC,IAAD,CAAMV,GAAG,IAAT,sBAIJ,uBACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,oBAAoBC,OAAQ,SAACZ,GAAD,OAAS,cAAC,EAAD,CAAeT,OAAQL,EAAUc,EAAMa,MAAMC,OAAOC,wBClB9FC,EAZqB,SAACC,GAC/BA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASb,OACP,cAAC,IAAMc,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e09d0afd.chunk.js","sourcesContent":["export type Recipe = {\n    name: string;\n    url: string;\n};\n\nexport const getRecipe = (name: string): Recipe => {\n    const matchingRecipe = allRecipes.filter((recipe) =>\n        recipe.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (matchingRecipe.length > 0) {\n        return matchingRecipe[0];\n    }\n\n    return {\n        name: \"Test 2\",\n        url: \"http://google.com\"\n    };\n};\n\nexport const allRecipes: Recipe[] = [\n    {\n        name: \"Bibimbap\",\n        url: \"https://www.lazycatkitchen.com/vegan-bibimbap/\"\n    }\n];","import React from 'react';\nimport 'app/pages/Pages.css';\nimport { Link } from 'react-router-dom';\nimport { allRecipes } from 'app/models/recipe';\n\nconst Home: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {\n          allRecipes.map((recipe) => {\n            return <Link key={recipe.name} to={`/recipe/${recipe.name}`}>{recipe.name}</Link>;\n          })\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default Home;\n","import { Recipe } from 'app/models/recipe';\nimport React from 'react';\n\ntype RecipeProps = {\n  recipe: Recipe;\n};\n\nconst RecipeDisplay: React.FC<RecipeProps> = (props: RecipeProps) => {\n  const recipe = props.recipe;\n\n  return (\n    <div className=\"recipe\">\n        <a href={recipe.url}>{recipe.name}</a>\n    </div>\n  );\n}\n\nexport default RecipeDisplay;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Home from 'app/pages/home';\nimport RecipeDisplay from 'app/pages/recipe';\nimport { getRecipe } from 'app/models/recipe';\n\nconst App: React.FC = () => {\n  const redirect = sessionStorage.redirect;\n  delete sessionStorage.redirect;\n  if (redirect && redirect != location.href) {\n    history.replaceState(null, process.env.REACT_APP_BASE_URL || '', redirect);\n  }\n\n  return (\n  <Router basename={process.env.REACT_APP_BASE_URL}>\n    <div>\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n      </ul>\n\n      <hr />\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/recipe/:recipeId\" render={(props)=><RecipeDisplay recipe={getRecipe(props.match.params.recipeId)}/>} />\n      </Switch>\n    </div>\n  </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals: () => void = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'index.css';\nimport App from 'app/App';\nimport reportWebVitals from 'app/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}